[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.commitizen]
version = "0.1.0"
version_files = [
  "src/__init__.py:__version__",
  "pyproject.toml:version",
  "VERSION",
]
tag_format = "v$version"
bump_message = "[ci skip] bump: $current_version â†’ $new_version"

[tool.poetry]
name = "ds-repo-template"
version = "0.1.0"
description = ""
authors = ["Your Name <you@example.com>"]
readme = "README.md"
packages = [
  { from = "template", include = "api" },
  { from = "template", include = "package" },
]
# or
# package = { include = "template" }

[tool.poetry.dependencies]
python = "^3.11"
loguru = "^0.7.2"
pydantic = "^2.7.1"
fastapi = "^0.111.0"
uvicorn = "^0.29.0"
ipykernel = "^6.29.4"
datasets = "^2.19.2"

ds-interface = { git = "https://github.com/raffle-ai/ds-interface.git", tag = "v3.12.0" }
environment = { git = "https://github.com/raffle-ai/hugorm.git", subdirectory = "environment", tag = "v10.1.1" }
file = { git = "https://github.com/raffle-ai/hugorm.git", subdirectory = "file", tag = "v10.1.1" }

# or for local development
# ds-interface = {path = "../ds-interface", develop=true}

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.0"
ruff = "^0.4.4"
black = "^24.4.2"
pre-commit = "^3.7.1"
commitizen = "^3.25.0"

[tool.black]
line-length = 120
exclude = '''
(
  /(
      \.git
    | \.pyx
    | \.venv
    | _build
    | build
    | dist
  )/
)
'''

[tool.ruff]
select = [
  "E",   # pycodestyle
  "F",   # pyflakes
  "D",   # pydocstyle
  "ANN", # flake8-annotations
  "PL",  # pylint
  "I",   # isort
  "B",   # flake8-bugbear
  "N",   # pep8-naming
  "C",   # mccabe
  "S",   # flake8-bandit
  "G",   # flake8-logging-format
  "DTZ", # flake8-datetimez
  "ICN", # flake8-import-conventions
  "RET", # flake8-return
  "SIM", # flake8-simplify
  "TID", # flake8-tidy-imports
  "PTH", # flake8-use-pathlib
  "ARG", # flake8-unused-arguments
]

ignore = [
  "D100",    # undocumented-public-module
  "D104",    # undocumented-public-package
  "D105",    # undocumented-magic-method
  "D107",    # undocumented-public-init
  "ANN101",  # missing-type-self
  "ANN204",  # missing-return-type-special-method
  "B905",    # zip-without-explicit-strict
  "PLC1901", # compare-to-empty-string
  "PTH123",  # builtin-open
  "RET504",  # unnecessary-assign
  # "N805", # invalid-first-argument-name-for-method
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = [
  "A",   # flake8-builtins
  "B",   # flake8-bugbear
  "C",   # mccabe
  "D",   # pydocstyle
  "E",   # pycodestyle error
  "F",   # Pyflakes
  "G",   # flake8-logging-format
  "I",   # isort
  "N",   # pep8-naming
  "Q",   # flake8-quotes
  "S",   # flake8-bandit
  "T",   # pycodestyle
  "W",   # pycodestyle warning
  "ANN", # flake8-annotations
  "ARG", # flake8-unused-arguments
  "BLE", # flake8-blind-except
  "COM", # flake8-commas
  "DJ",  # flake8-django
  "DTZ", # flake8-datetimez
  "EM",  # flake8-errmsg
  "ERA", # eradicate
  "EXE", # flake8-executable
  "FBT", # flake8-boolean-trap
  "ICN", # flake8-import-conventions
  "INP", # flake8-no-pep420
  "ISC", # flake8-implicit-str-concat
  "NPY", # NumPy-specific rules
  "PD",  # pandas-vet
  "PGH", # pygrep-hooks
  "PIE", # flake8-pie
  "PL",  # Pylint
  "PT",  # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "PYI", # flake8-pyi
  "RET", # flake8-return
  "RSE", # flake8-raise
  "RUF", # Ruff-specific rules
  "SIM", # flake8-simplify
  "SLF", # flake8-self
  "TCH", # flake8-type-checking
  "TID", # flake8-tidy-imports
  "TRY", # tryceratops
  "UP",  # pyupgrade
  "YTT", # flake8-2020
]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
]

# don't remove unsued imports from __init__.py files
ignore-init-module-imports = true

line-length = 120

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.11.
target-version = "py311"

[tool.ruff.per-file-ignores]
"*/__init__.py" = [
  "F401", # unused-import
]
"tests/*" = [
  "S101",    # assert
  "D102",    # undocumented-public-method
  "D103",    # undocumented-public-function
  "PLR2004", # magic-value-comparison

]

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.isort]
split-on-trailing-comma = true

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.pylint]
max-args = 8
